<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spear.Core</name>
    </assembly>
    <members>
        <member name="T:Spear.Core.Config.ConfigManager">
            <summary> 配置管理器 </summary>
        </member>
        <member name="E:Spear.Core.Config.ConfigManager.ConfigChanged">
            <summary> 配置文件变更事件 </summary>
        </member>
        <member name="P:Spear.Core.Config.ConfigManager.Config">
            <summary> 当前配置 </summary>
        </member>
        <member name="P:Spear.Core.Config.ConfigManager.Instance">
            <summary> 单例 </summary>
        </member>
        <member name="M:Spear.Core.Config.ConfigManager.Build(System.Action{Microsoft.Extensions.Configuration.IConfigurationBuilder})">
            <summary> 构建配置 </summary>
            <param name="builderAction"></param>
        </member>
        <member name="M:Spear.Core.Config.ConfigManager.Get``1(System.String,``0)">
            <summary> 配置文件读取 </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">默认值</param>
            <param name="key">配置名</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Config.ConfigManager.GetConfig``1(``0,System.String,System.String)">
            <summary> 配置文件读取 </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue">默认值</param>
            <param name="key">配置名</param>
            <param name="supressKey">配置别名</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Config.ConfigManager.Reload">
            <summary> 重新加载配置 </summary>
        </member>
        <member name="T:Spear.Core.Config.DConfigProvider">
            <summary> 基础配置提供者 </summary>
        </member>
        <member name="M:Spear.Core.Config.DConfigProvider.ConvertKey(System.String)">
            <summary> 键转换 </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Config.DConfigProvider.LoadJson(System.String,System.Boolean)">
            <summary> 加载配置 </summary>
            <param name="json"></param>
            <param name="clean"></param>
        </member>
        <member name="M:Spear.Core.Config.JsonConfigurationParser.Parse(System.String)">
            <summary> 转换Json字符 </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Config.JsonConfigurationParser.Parse(System.IO.Stream)">
            <summary> 转换json流 </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Constants.Md5(System.String,System.Text.Encoding)">
            <summary> MD5加密 </summary>
            <param name="data">数据</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Constants.AssemblyKey(System.Reflection.Assembly)">
            <summary> 程序集key </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Constants.Mode">
            <summary> 产品模式 </summary>
        </member>
        <member name="M:Spear.Core.Constants.LocalIp">
            <summary> 获取本地IP </summary>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Disposable">
            <summary> 实现IDisposable接口，标示当前类型可释放 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.DefaultCode">
            <summary> 默认错误码 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.SystemError">
            <summary> 系统开小差了，我们正在找他回来~ </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.ParamaterError">
            <summary> 参数错误 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.ClientError">
            <summary> 调用受限 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.ClientTimeoutError">
            <summary> 调用受限 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.NeedTicket">
            <summary> 需要客户端令牌 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.InvalidTicket">
            <summary> 客户端令牌已失效 </summary>
        </member>
        <member name="F:Spear.Core.Exceptions.ErrorCodes.NoService">
            <summary> 没有可用的服务 </summary>
        </member>
        <member name="T:Spear.Core.Exceptions.ErrorCodesExtension">
            <summary> 错误码扩展 </summary>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.Message(System.Int32)">
            <summary> 获取错误码对应的错误信息 </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.Message``1(System.Int32)">
            <summary> 获取错误码对应的错误信息 </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.CodeException``1(System.Int32,System.String)">
            <summary> 错误编码对应的Exception </summary>
            <typeparam name="T"></typeparam>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.CodeException(System.Int32,System.String)">
            <summary> 错误编码对应的Exception </summary>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.Codes``1">
            <summary> 获取错误码 </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.Codes">
            <summary> 获取错误码 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Exceptions.ErrorCodesExtension.Codes(System.Type)">
            <summary> 获取错误码 </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:Spear.Core.Message.ContentTypes.InvokeType">
            <summary> 调用消息类型 </summary>
        </member>
        <member name="F:Spear.Core.Message.ContentTypes.InvokeResultType">
            <summary> 调用结果消息类型 </summary>
        </member>
        <member name="T:Spear.Core.Message.IMessageEncoder">
            <summary> 消息编码器 </summary>
        </member>
        <member name="M:Spear.Core.Message.IMessageEncoder.EncodeAsync(System.Object,System.Boolean)">
            <summary> 消息编码 </summary>
            <param name="message"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Message.IMessageDecoder">
            <summary> 消息解码器 </summary>
        </member>
        <member name="M:Spear.Core.Message.IMessageDecoder.DecodeAsync(System.Byte[],System.Type,System.Boolean)">
            <summary> 消息解码 </summary>
            <param name="data"></param>
            <param name="type"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Message.IMessageCodecFactory.GetEncoder">
            <summary> 获取编码器 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Message.IMessageCodecFactory.GetDecoder">
            <summary> 获取解码器 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Message.MessageCodecExtensions.DecodeAsync``1(Spear.Core.Message.IMessageDecoder,System.Byte[],System.Boolean)">
            <summary> 解码 </summary>
            <typeparam name="T"></typeparam>
            <param name="decoder"></param>
            <param name="data"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Message.MessageCodecExtensions.Encode(Spear.Core.Message.IMessageEncoder,System.Object,System.Boolean)">
            <summary> 编码 </summary>
            <param name="encoder"></param>
            <param name="message"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Message.MessageCodecExtensions.Decode(Spear.Core.Message.IMessageDecoder,System.Byte[],System.Type,System.Boolean)">
            <summary> 解码 </summary>
            <param name="decoder"></param>
            <param name="data"></param>
            <param name="type"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Message.MessageCodecExtensions.Decode``1(Spear.Core.Message.IMessageDecoder,System.Byte[],System.Boolean)">
            <summary> 解码 </summary>
            <typeparam name="T"></typeparam>
            <param name="decoder"></param>
            <param name="data"></param>
            <param name="gzip"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Message.ReceivedDelegate">
            <summary> 接受到消息的委托 </summary>
            <param name="sender">消息发送者。</param>
            <param name="message">接收到的消息。</param>
        </member>
        <member name="E:Spear.Core.Message.IMessageListener.Received">
            <summary> 接收到消息的事件 </summary>
        </member>
        <member name="M:Spear.Core.Message.IMessageListener.OnReceived(Spear.Core.Message.IMessageSender,Spear.Core.Message.Models.DMessage)">
            <summary> 触发接收到消息事件 </summary>
            <param name="sender">消息发送者。</param>
            <param name="message">接收到的消息。</param>
            <returns>一个任务。</returns>
        </member>
        <member name="T:Spear.Core.Message.IMessageSender">
            <summary>  消息发送者 </summary>
        </member>
        <member name="M:Spear.Core.Message.IMessageSender.Send(Spear.Core.Message.Models.DMessage,System.Boolean)">
            <summary> 发送消息 </summary>
            <param name="message"></param>
            <param name="flush"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Message.IMessageSerializer">
            <summary> 消息序列化 </summary>
        </member>
        <member name="T:Spear.Core.Message.Implementation.MessageListener">
            <summary> 消息监听者 </summary>
        </member>
        <member name="E:Spear.Core.Message.Implementation.MessageListener.Received">
            <inheritdoc />
            <summary>
            接收到消息的事件。
            </summary>
        </member>
        <member name="M:Spear.Core.Message.Implementation.MessageListener.OnReceived(Spear.Core.Message.IMessageSender,Spear.Core.Message.Models.DMessage)">
            <summary> 接收到消息 </summary>
            <param name="sender"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Message.Json.Models.JsonInvokeMessage.ServiceId">
            <summary> 服务Id </summary>
        </member>
        <member name="P:Spear.Core.Message.Json.Models.JsonInvokeMessage.Parameters">
            <summary> 服务参数 </summary>
        </member>
        <member name="P:Spear.Core.Message.Json.Models.JsonResultMessage.Code">
            <summary> 状态码 </summary>
        </member>
        <member name="P:Spear.Core.Message.Json.Models.JsonResultMessage.Message">
            <summary> 错误消息 </summary>
        </member>
        <member name="P:Spear.Core.Message.Json.Models.JsonResultMessage.Content">
            <summary> 数据实体 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.DMessageResult`1.Code">
            <summary> 状态码 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.DMessageResult`1.Message">
            <summary> 错误消息 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.DMessageResult`1.Content">
            <summary> 数据实体 </summary>
        </member>
        <member name="T:Spear.Core.Message.Models.IMessageDynamic">
            <summary> 动态类型 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageDynamic.ContentType">
            <summary> 类型 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageDynamic.Content">
            <summary> 数据 </summary>
        </member>
        <member name="M:Spear.Core.Message.Models.IMessageDynamic.SetValue(System.Object)">
            <summary> 设置对象 </summary>
            <param name="value"></param>
        </member>
        <member name="M:Spear.Core.Message.Models.IMessageDynamic.GetValue">
            <summary> 获取对象 </summary>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageInvoke`1.ServiceId">
            <summary> 服务Id </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageInvoke`1.Parameters">
            <summary> 服务参数 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageResult`1.Code">
            <summary> 状态码 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageResult`1.Message">
            <summary> 错误消息 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.IMessageResult`1.Content">
            <summary> 数据实体 </summary>
        </member>
        <member name="T:Spear.Core.Message.Models.InvokeMessage">
            <summary> 调用消息 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.InvokeMessage.ServiceId">
            <summary> 服务Id </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.InvokeMessage.Parameters">
            <summary> 服务参数 </summary>
        </member>
        <member name="T:Spear.Core.Message.Models.MessageResult">
            <summary> 调用结果消息 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.MessageResult.Code">
            <summary> 状态码 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.MessageResult.Message">
            <summary> 错误消息 </summary>
        </member>
        <member name="P:Spear.Core.Message.Models.MessageResult.Content">
            <summary> 数据实体 </summary>
        </member>
        <member name="T:Spear.Core.Micro.IMicroBuilder">
            <summary> Spear 服务构建器 </summary>
        </member>
        <member name="T:Spear.Core.Micro.IMicroClientBuilder">
            <summary> Spear客户端构建器 </summary>
        </member>
        <member name="T:Spear.Core.Micro.IMicroServerBuilder">
            <summary> Spear服务端构建器 </summary>
        </member>
        <member name="T:Spear.Core.Micro.MicroBuilder">
            <summary> Spear构建器 </summary>
        </member>
        <member name="T:Spear.Core.Micro.IMicroClient">
            <summary> 微服务客户端 </summary>
        </member>
        <member name="M:Spear.Core.Micro.IMicroClient.Send(Spear.Core.Message.Models.InvokeMessage)">
            <summary> 发送消息 </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.IMicroClientFactory">
            <summary> Spear客户端工厂 </summary>
        </member>
        <member name="M:Spear.Core.Micro.IMicroClientFactory.CreateClient(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 创建客户端 </summary>
            <param name="serviceAddress"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.IMicroEntryFactory">
            <summary> 服务发现工厂 </summary>
        </member>
        <member name="P:Spear.Core.Micro.IMicroEntryFactory.Entries">
            <summary> 方法列表 </summary>
        </member>
        <member name="M:Spear.Core.Micro.IMicroEntryFactory.GetContracts">
            <summary> 获取所有服务程序集 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.IMicroEntryFactory.GetServiceId(System.Reflection.MethodInfo)">
            <summary> 获取服务条码Id </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.IMicroEntryFactory.Find(System.String)">
            <summary> 查找服务条目 </summary>
            <param name="serviceId"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.IMicroExecutor">
            <summary> 服务执行者 </summary>
        </member>
        <member name="M:Spear.Core.Micro.IMicroExecutor.Execute(Spear.Core.Message.IMessageSender,Spear.Core.Message.Models.InvokeMessage)">
            <summary> 执行 </summary>
            <param name="sender"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.IMicroHost">
            <summary> 微服务主机 </summary>
        </member>
        <member name="M:Spear.Core.Micro.IMicroHost.Start(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 启动服务 </summary>
            <param name="serviceAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.IMicroHost.Start(System.String,System.Int32)">
            <summary> 启动服务 </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.IMicroHost.Stop">
            <summary> 停止服务 </summary>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.IMicroListener">
            <summary> 微服务监听者 </summary>
        </member>
        <member name="M:Spear.Core.Micro.IMicroListener.Start(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 启动监听 </summary>
            <param name="serviceAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.IMicroListener.Start(System.String,System.Int32)">
            <summary> 启动监听 </summary>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.IMicroListener.Stop">
            <summary> 停止监听 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.DMicroClientFactory.Create(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 创建客户端 </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.DMicroClientFactory.Remove(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 删除客户端缓存 </summary>
            <param name="address"></param>
        </member>
        <member name="T:Spear.Core.Micro.Implementation.DMicroHost">
            <summary> 服务宿主基类 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.DMicroHost.MicroListener">
            <summary> 消息监听者。 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.DMicroHost.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.DMicroHost.Start(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 启动微服务 </summary>
            <param name="serviceAddress">主机终结点。</param>
            <returns>一个任务。</returns>
        </member>
        <member name="T:Spear.Core.Micro.Implementation.MicroClient">
            <summary> 默认服务客户端 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.MicroEntry.Method">
            <summary> 方法 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.MicroEntry.Invoke">
            <summary> 执行代理 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.MicroEntry.IsTask">
            <summary> 是否是Task </summary>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.MicroEntry.IsNotify">
            <summary> 是否是通知 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.MicroEntry.Parameters">
            <summary> 参数 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroEntry.#ctor(System.Reflection.MethodInfo)">
            <summary> Ctor </summary>
            <param name="method"></param>
        </member>
        <member name="T:Spear.Core.Micro.Implementation.MicroEntryFactory">
            <summary>/// 本地服务工厂
            </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroEntryFactory.InitServices">
            <summary> 初始化服务 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroEntryFactory.GenerateServiceId(System.Reflection.MethodInfo)">
            <summary> 生成服务ID </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroEntryFactory.GetContracts">
            <summary> 获取服务列表 </summary>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Micro.Implementation.MicroEntryFactory.Entries">
            <summary> 服务方法 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroEntryFactory.GetServiceId(System.Reflection.MethodInfo)">
            <summary> 获取服务ID </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroEntryFactory.Find(System.String)">
            <summary> 查找服务 </summary>
            <param name="serviceId"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.Implementation.MicroExecutor">
            <inheritdoc />
            <summary> 默认服务执行者 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroExecutor.Execute(Spear.Core.Message.IMessageSender,Spear.Core.Message.Models.InvokeMessage)">
            <summary> 执行 </summary>
            <param name="sender"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.Implementation.MicroHost">
            <summary> 服务宿主 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroHost.#ctor(Spear.Core.Micro.IMicroExecutor,Spear.Core.Micro.IMicroListener,Spear.Core.Micro.Services.IServiceRegister,Spear.Core.Micro.IMicroEntryFactory,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary> 服务宿主机 </summary>
            <param name="serviceExecutor"></param>
            <param name="microListener"></param>
            <param name="serviceRegister"></param>
            <param name="entryFactory"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroHost.Start(Spear.Core.Micro.Services.ServiceAddress)">
            <inheritdoc />
            <summary> 启动服务 </summary>
            <param name="serviceAddress">主机终结点。</param>
            <returns>一个任务。</returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroHost.Stop">
            <summary> 停止服务 </summary>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.Implementation.MicroListener">
            <inheritdoc cref="T:Spear.Core.Message.Implementation.MessageListener" />
            <summary> 默认服务监听者 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroListener.Start(Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 开启监听 </summary>
            <param name="serviceAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroListener.Start(System.String,System.Int32)">
            <summary> 开启监听 </summary>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Implementation.MicroListener.Stop">
            <summary> 停止监听 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Services.DServiceFinder.QueryService(System.Type,Spear.Core.ProductMode[])">
            <summary> 查询服务 </summary>
            <param name="serviceType"></param>
            <param name="modes"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Services.DServiceFinder.Find(System.Type)">
            <summary> 服务发现 </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.Services.IServiceFinder">
            <summary> 服务探测器 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Services.IServiceFinder.Find(System.Type)">
            <summary> 服务发现 </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Services.IServiceFinder.CleanCache(System.Type)">
            <summary> 清除服务缓存 </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Micro.Services.IServiceRegister">
            <summary> 服务注册器 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Services.IServiceRegister.Regist(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Spear.Core.Micro.Services.ServiceAddress)">
            <summary> 注册服务 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Services.IServiceRegister.Deregist">
            <summary> 注销服务 </summary>
        </member>
        <member name="P:Spear.Core.Micro.Services.ServiceAddress.Service">
            <summary> 对外注册的服务地址(ip或DNS) </summary>
        </member>
        <member name="P:Spear.Core.Micro.Services.ServiceAddress.Weight">
            <summary> 权重 </summary>
        </member>
        <member name="M:Spear.Core.Micro.Services.ServiceAddressExtensions.Random">
            <summary>
            获取线程级随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Micro.Services.ServiceAddressExtensions.Random(System.Collections.Generic.IList{Spear.Core.Micro.Services.ServiceAddress})">
            <summary> 权重随机 </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.ProductMode">
            <summary> 产品模式 </summary>
        </member>
        <member name="F:Spear.Core.ProductMode.Dev">
            <summary> 开发 </summary>
        </member>
        <member name="F:Spear.Core.ProductMode.Test">
            <summary> 测试服务器 </summary>
        </member>
        <member name="F:Spear.Core.ProductMode.Ready">
            <summary> 预发布 </summary>
        </member>
        <member name="F:Spear.Core.ProductMode.Prod">
            <summary> 正式 </summary>
        </member>
        <member name="T:Spear.Core.ProtocolAttribute">
            <summary> 协议属性 </summary>
        </member>
        <member name="P:Spear.Core.ProtocolAttribute.Protocol">
            <summary> 协议 </summary>
        </member>
        <member name="T:Spear.Core.Proxy.ClientProxy">
            <summary> 代理调用 </summary>
        </member>
        <member name="M:Spear.Core.Proxy.ClientProxy.#ctor(Microsoft.Extensions.Logging.ILogger{Spear.Core.Proxy.ClientProxy},System.IServiceProvider,Spear.Core.Micro.Services.IServiceFinder)">
            <inheritdoc />
            <summary> 构造函数 </summary>
        </member>
        <member name="M:Spear.Core.Proxy.ClientProxy.ClientInvokeAsync(Spear.Core.Micro.Services.ServiceAddress,Spear.Core.Message.Models.InvokeMessage)">
            <summary> 执行请求 </summary>
            <param name="serviceAddress"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Reflection.DefaultAssemblyFinder.FindAll">
            <summary> 查找所有程序集 </summary>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Reflection.DefaultAssemblyFinder.Find(System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary> 查找程序集 </summary>
            <param name="assemblyFunc"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Reflection.IAssemblyFinder">
            <summary> 程序集查找器 </summary>
        </member>
        <member name="T:Spear.Core.Reflection.ITypeFinder">
            <summary> 类型查找器 </summary>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.GetService``1(System.IServiceProvider,Spear.Core.Config.ServiceProtocol)">
            <summary> 获取服务 </summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.GetService(System.IServiceProvider,System.Type,Spear.Core.Config.ServiceProtocol)">
            <summary> 获取服务 </summary>
            <param name="provider"></param>
            <param name="type"></param>
            <param name="protocol"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.ServiceKey(System.Reflection.MethodInfo)">
            <summary> 获取服务主键 </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddJsonCodec``1(``0)">
            <summary> 使用Json编解码器。 </summary>
            <param name="builder">服务构建者。</param>
            <returns>服务构建者。</returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddSession(Spear.Core.Micro.IMicroClientBuilder)">
            <summary> 使用Session。 </summary>
            <param name="builder">服务构建者。</param>
            <returns>服务构建者。</returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddSession``1(Spear.Core.Micro.IMicroClientBuilder)">
            <summary> 使用Session。 </summary>
            <param name="builder">服务构建者。</param>
            <returns>服务构建者。</returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddSession(Spear.Core.Micro.IMicroServerBuilder)">
            <summary> 使用Session。 </summary>
            <param name="builder">服务构建者。</param>
            <returns>服务构建者。</returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddSession``1(Spear.Core.Micro.IMicroServerBuilder)">
            <summary> 使用Session。 </summary>
            <param name="builder">服务构建者。</param>
            <returns>服务构建者。</returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddMicroClient(Spear.Core.Micro.IMicroClientBuilder,System.Action{Spear.Core.Micro.IMicroClientBuilder},System.Action{Spear.Core.Config.SpearConfig})">
            <summary> 添加微服务客户端 </summary>
            <param name="services"></param>
            <param name="builderAction"></param>
            <param name="configAction"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.AddMicroService(Spear.Core.Micro.IMicroServerBuilder,System.Action{Spear.Core.Micro.IMicroServerBuilder},System.Action{Spear.Core.Config.SpearConfig})">
            <summary> 添加微服务 </summary>
            <param name="services"></param>
            <param name="builderAction"></param>
            <param name="configAction"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.UseMicroService(System.IServiceProvider,System.String,System.Int32)">
            <summary> 开启微服务 </summary>
            <param name="provider"></param>
            <param name="host"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.ServiceCollectionExtensions.UseMicroService(System.IServiceProvider,System.Action{Spear.Core.Micro.Services.ServiceAddress})">
            <summary> 开启微服务 </summary>
            <param name="provider"></param>
            <param name="addressAction"></param>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Session.IMicroSession.UserId">
            <summary> 用户ID </summary>
        </member>
        <member name="P:Spear.Core.Session.IMicroSession.TenantId">
            <summary> 租户ID </summary>
        </member>
        <member name="P:Spear.Core.Session.IMicroSession.UserName">
            <summary> 用户名 </summary>
        </member>
        <member name="P:Spear.Core.Session.IMicroSession.Role">
            <summary> 角色 </summary>
        </member>
        <member name="P:Spear.Core.Session.IMicroSession.TenancySides">
            <summary> 多租户类型 </summary>
        </member>
        <member name="M:Spear.Core.Session.IMicroSession.Use(Spear.Core.Session.MicroSessionDto)">
            <summary> 使用租户 </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Session.MicroSessionExtensions.GetUserId``1(Spear.Core.Session.IMicroSession,``0)">
            <summary> 获取UserId </summary>
            <typeparam name="T"></typeparam>
            <param name="session"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Session.MicroSessionExtensions.GetTenantId``1(Spear.Core.Session.IMicroSession,``0)">
            <summary> 获取TenantId </summary>
            <typeparam name="T"></typeparam>
            <param name="session"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Session.MicroSessionExtensions.GetRequiredUserId``1(Spear.Core.Session.IMicroSession)">
            <summary> 获取必须的UserId(没有将抛出异常) </summary>
            <typeparam name="T"></typeparam>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.Session.MicroSessionExtensions.GetRequiredTenantId``1(Spear.Core.Session.IMicroSession)">
            <summary> 获取必须的TenantId(如果没有将抛出异常) </summary>
            <typeparam name="T"></typeparam>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="P:Spear.Core.Session.MicroClaimTypes.UserName">
            <summary>
            UserId.
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Name"/>
            </summary>
        </member>
        <member name="P:Spear.Core.Session.MicroClaimTypes.UserId">
            <summary>
            UserId.
            Default: <see cref="F:System.Security.Claims.ClaimTypes.NameIdentifier"/>
            </summary>
        </member>
        <member name="P:Spear.Core.Session.MicroClaimTypes.Role">
            <summary>
            UserId.
            Default: <see cref="F:System.Security.Claims.ClaimTypes.Role"/>
            </summary>
        </member>
        <member name="P:Spear.Core.Session.MicroClaimTypes.TenantId">
            <summary>
            TenantId.
            Default: http://www.acb.com/identity/claims/tenantId
            </summary>
        </member>
        <member name="P:Spear.Core.Session.MicroSessionDto.UserId">
            <summary> 用户ID </summary>
        </member>
        <member name="P:Spear.Core.Session.MicroSessionDto.TenantId">
            <summary> 租户ID </summary>
        </member>
        <member name="P:Spear.Core.Session.MicroSessionDto.UserName">
            <summary> 用户名 </summary>
        </member>
        <member name="P:Spear.Core.Session.MicroSessionDto.Role">
            <summary> 角色 </summary>
        </member>
        <member name="T:Spear.Core.Singleton">
            <summary> 单例辅助 </summary>
        </member>
        <member name="P:Spear.Core.Singleton.AllSingletons">
            <summary> 所有单例 </summary>
        </member>
        <member name="T:Spear.Core.Singleton`1">
            <summary> 单例泛型辅助 </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Spear.Core.Singleton`1.Instance">
            <summary> 单例 </summary>
        </member>
        <member name="T:Spear.Core.SingletonList`1">
            <summary>
            单例泛型列表辅助
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Spear.Core.SingletonList`1.Instance">
            <summary>
            The singleton instance for the specified type T. Only one instance (at the time) of this list for each type of T.
            </summary>
        </member>
        <member name="M:Spear.Core.SpearExtensions.ServiceName(System.Reflection.Assembly)">
            <summary> 服务命名 </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.RandomSort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary> 随机排序 </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.Format(System.Exception,System.Boolean)">
            <summary> 异常信息格式化 </summary>
            <param name="ex"></param>
            <param name="isHideStackTrace"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.IsNullableType(System.Type)">
            <summary>
            判断类型是否为Nullable类型
            </summary>
            <param name="type"> 要处理的类型 </param>
            <returns> 是返回True，不是返回False </returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.GetUnNullableType(System.Type)">
            <summary>
            通过类型转换器获取Nullable类型的基础类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.IsSimpleType(System.Type)">
            <summary> 是否是简单类型 </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.CastTo``1(System.Object)">
            <summary>
            对象转换为泛型
            </summary>
            <param name="obj"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.CastTo``1(System.Object,``0)">
            <summary>
            对象转换为泛型
            </summary>
            <param name="obj"></param>
            <param name="def"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.CastTo(System.Object,System.Type)">
            <summary> 把对象类型转换为指定类型 </summary>
            <param name="obj"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.Env(System.String,System.Nullable{System.EnvironmentVariableTarget})">
            <summary> 获取环境变量 </summary>
            <param name="name">变量名称</param>
            <param name="target">存储目标</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.Env``1(System.String,``0,System.Nullable{System.EnvironmentVariableTarget})">
            <summary> 获取环境变量 </summary>
            <typeparam name="T"></typeparam>
            <param name="name">变量名称</param>
            <param name="def">默认值</param>
            <param name="target">存储目标</param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.Config``1(System.String,``0)">
            <summary> 读取配置文件 </summary>
            <typeparam name="T"></typeparam>
            <param name="configName"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.UseLocal(Spear.Core.Config.ConfigManager,System.String)">
            <summary> 使用本地文件配置 </summary>
        </member>
        <member name="M:Spear.Core.SpearExtensions.GetValue``1(System.Collections.Generic.IDictionary{System.Object,System.Object},System.Object,``0)">
            <summary> 获取值 </summary>
            <typeparam name="T"></typeparam>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.ToObject``1(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary> 将网关参数转为类型 </summary>
            <typeparam name="T">类型</typeparam>
            <param name="dict"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.Zip(System.Byte[])">
            <summary> zip压缩 </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Spear.Core.SpearExtensions.UnZip(System.Byte[])">
            <summary> zip解压 </summary>
            <param name="zipBuffer"></param>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Tenant.ITenantResolver">
            <summary> 租户解析器 </summary>
        </member>
        <member name="M:Spear.Core.Tenant.ITenantResolver.ResolveTenantId">
            <summary> 获取租户ID </summary>
            <returns></returns>
        </member>
        <member name="T:Spear.Core.Tenant.TenancySides">
            <summary> 租户站点类型 </summary>
        </member>
        <member name="F:Spear.Core.Tenant.TenancySides.Tenant">
            <summary> 租户 </summary>
        </member>
        <member name="F:Spear.Core.Tenant.TenancySides.Host">
            <summary> 主机 </summary>
        </member>
    </members>
</doc>
